Physical layer is single line half duplex ttl serial, 9600bps
Communication between controller and heater can be sniffed by simply connecting RX line of USB to TTL converter

red - +5V
blue - RX/TX
black - GND


PACKET STRUCTURE
	- packet start: 1 byte
		0xa5 - controller to heater command
		0xa0 - heater to controller response
	- command type: 2 bytes, Little-endian
	- n, data length, counting from the next byte
	- data, n-bytes, Little-endian
	- crc of the whole packet (start, command, length, data)
	
CRC-8/MAXIM-DOW
	Poly 0x31	
	Init 0x00	
	RefIn true	
	RefOut true	
	XorOut 0x00


READ REGISTER COMMAND 0x30
a5 30 00 01 reg crc

eg.
a5 30 00 01 0b 4d 	read error command, 
a0 00 00 01 07 74   resp, error 7
a0 00 00 01 ff 74   resp, no error

Registers (read by C24 controller):
0x01 - config flags (cb6b06ff or cb6b06bf),		read on startup
0x03 - max power,								read on startup
0x04 - min power,								read on startup
0x05 - (0.022), pump flow ml/cycle				read on startup
0x0b - error, uint8_t, 0xff - no error
0x0c - state, uint32_t
	1 - power on
	2 - fan test
	5 - glowplug test
	6 - preignition
	7 - fuel priming
	9 - firing up
	10 - ignited
	11 - heating up
	13 - stabilized
	17 - cooldown
	28 - ventilation mode
	31 - shutdown
0x20 - burner temperature, float
0x23 - ???
0x24 - supply voltage, float
0x50 - components activity, uint8_t, 
	0 - glow plug, 
	1 - injector, 
	2 - fan, 
	3 - heating, 
	5 - turned on
0x66 - operation mode, uint8_t, 				read on startup
	0 - normal, 
	1 - prime, 
	2 - fan

Other found by experiments
0x00 - size: 8 / 53 53 33 2e 32 30 61 00 / "SS3.20a"	version?
0x12 - size: 4 / 7e 74 46 41  / 1095136382 / 12.40
0x21 - size: 4 / 1f 71 de 41  / 1105096991 / 27.81
0x26 - size: 4 / 0c 8a 90 43  / 1133545996 / 289.08
0x60 - size: 4 / 00 00 fa 44  / 1157234688 / 2000.00   	heater power, float
0x61 - size: 4 / 00 00 90 41  / 1099956224 / 18.00		set temperature, float
0x62 - size: 4 / d0 07 00 00  / 2000 / 0.00				fan speed, int32
0x63 - size: 4 / 00 00 a0 41  / 1101004800 / 20.00		
0x65 - size: 1 / 01  / 1


WRITE REGISTER COMMANDS
first byte of data is register id, the rest is actual data
these registers ids doesn't correspond to read register ids

a5 20 00 05 00 76 58 b5 41 9f - send room temperature, float

-----------
turn on normal
a5 01 00 02 02 00 a4
a5 01 00 02 02 00 a4
a5 01 00 02 02 00 a4
a5 01 00 02 03 01 3e

a5 01 00 05 01 float 	set power, min prop 0x04, max prop 0x03

turn on fuel prime
a5 01 00 02 02 01 fa
a5 01 00 02 02 01 fa
a5 01 00 02 02 01 fa
a5 01 00 02 03 01 3e

turn on fan
a5 01 00 02 02 02 18
a5 01 00 02 02 02 18
a5 01 00 02 02 02 18
a5 01 00 02 03 01 3e


a5 01 00 05 05 uint32_t 	set fan speed, min prop 0x04, max prop 0x03



heartbeat?
a5 20 00 05 01 00 00 00 00 48

turn off
a5 01 00 02 03 00 60
a5 01 00 02 03 00 60
a5 01 00 02 03 00 60
-----------
set pump flow [ml/cycle], float
a5 03 00 05 04 42 60 e5 3c 22
-----------
hidden menu, different settings
a5 03 00 05 01 eb 6b 06 bf 45 	auto, temp reg
a5 03 00 05 01 cb 6b 06 ff 73 	12, temp reg
a5 03 00 05 01 eb 6b 06 ff 03 	24, temp reg
a5 03 00 05 01 eb 6b 06 bf 45 	auto, temp reg
a5 03 00 05 01 eb 2b 06 bf 74 	auto, temp off
a5 03 00 05 01 eb 6b 06 3f c9 	pump auto


a5 03 00 00 cc  save settings?
a5 07 00 00 52  save settings?

-----------

start pumping
a5 02 00 05 01 00 00 00 41 7e		8
a5 02 00 05 02 00 5a 55 aa 60		
stop pumping
a5 02 00 05 02 00 00 00 00 28